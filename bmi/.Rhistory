install.packages("AnnotLists")
library("AnnotLists", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
remove.packages("AnnotLists", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
library()
a = c(1,2,3)
b = sum(a)
b
rnorm(10)
rnorm(10)
source("http://www.bioconductor.org/biocLite.R")
biocLite("golubEsets")
require(golubEsets)
#Object
data(Golub_Merge)
Golub_Merge
experimentData(Golub_Merge)
substr(abstract(Golub_Merge), 1,100)
abstract(Golub_Merge)
substr(abstract(Golub_Merge), 1, 200)
Golub_Merge
dim(exprs(Golub_Merge))
exprs(Golub_Merge)
head(exprs(Golub_Merge))
head(exprs(Golub_Merge))
exit
exit()
system.file
help
help(system.file)
system.file("extData", package="Biobase")
system.file()
system.file(package="Biobase")
getwd()
ls
ls()
system.file("extdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprsFile
dataDirectory <- system.file("man", package="Biobase")
dataDirectory <- system.file("ExpressionSet", package="Biobase")
dataDirectory
help(read.table)
dataDirectory <- system.file("exprdata", package="Biobase")
dataDirectory <- system.file("exprsdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprs <- read.table(exprsFile, header=TRUE, sep="\t", row.names=1, as.is=TRUE)
dim(exprs)
exprs
exprs <- as.matrix(exprs)
dim(exprs)
exprs[1, 1]
exprs[1, 2]
exprs[2, 1]
colnames(exprs)
rownames(exprs)
head(exprs)
dim(head(exprs))
head(exprs[, 1:5])
exprs[, 1:5]
exprs[, 1]
pDataFile <- file.path(dataDirectory, "pData.txt")
help(factor)
pData <- read.table(pDataFile, sep="\t", header=TRUE, row.names=1)
pData
colnames(pData)
apropos("name")
colnames(pData)
help(sapply)
sapply(colnames(pData), class)
sapply(pData, class)
pData
pData
pData[1, c("type", "score")]
pData[1, 2, c("type", "score")]
pData[c(1, 2), c("type", "score")]
pData
pData[c(1, 2),]
??input
?input
help(input)
apropos(plot)
apropos(file.path)
pain <- c(0, 3, 2, 2, 1)
sPain <- as.factor(c(3,2,2,1))
levels(sPain) <- c("none", "mild", "medium", "severe")
is.factor(sPain)
is.vector(sPain)
sPain
sPain <- as.factor(c(4,3,2,1))
sPain
levels(sPain) <- c("none", "mild", "medium", "severe")
sPain
?names
pain
pain[-4]
pain[-2]
pain[-1]
pain[-5]
pain[1:3]
pain[-1:-3]
pain[-1:-2]
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
}
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
};
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2;
}
pain
pain[-3:-1]
pain[-4:-1]
library("affy")
?library
library
library()
untar("GSE3744/GSE3744_RAW.tar", exdir="data")
data <- read.table()
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep = ",",
)
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep=",",
header=T
)
data
head(data)
data[10, ]
data[1:10, ]
data[1:100, ]
class(data)
summary(data)
dim(data)
summary(data)
dataURL <- paste("http://archive.ics.uci.edu/ml", "machine-learning-databases/statlog/german/german.data", sep="")
dataURL
dataURL <- paste("http://archive.ics.uci.edu/ml/", "machine-learning-databases/statlog/german/german.data", sep="")
clear
dataURL
data <- read.table(dataURL, header=F)
data
head(data)
data <- read.table(dataURL, stringsAsFactors=F, header=F)
head(data)
?read.table
colnames(data) <- 1:21
head(data)
colnames(data) <- A:Z
colnames(data) <- 'A':'Z'
a <- "A:Z"
a
a <- "A":"Z"
?range
range(A, Z)
range("A, "Z"")
range("A", "Z"")
f
f
f
range
range()
;
;
:sdsd
sd
sd
sd
d
)
)
)))
head(data)
d$21
ddata$21
data$21
data
data$
data$1
data$[1]
head(data)
head(data)
head(data[, 21])
data[21]
data[21] <- as.factor(ifelse(data[21]==1, "Good Loan", "Bad Loan"))
head(data)
data[21] <- as.factor(ifelse(data[21]==1, "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="Good Loan", "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="BadLoan", "BadLoan", "GoodLoan"))
head(data)
data[1, 21]
data[1, 21] == "BadLoan"
?as.factor
range(A, a)
range("A", "Z")
range("A":"Z")
range(1, 10)
1:10
A:Z
"A":"Z"
'A':'Z'
letters
LETTERS
letters[1:21]
head(data)
colnames(data) <- LETTERS[1:21]
head(data)
data$A
head(data)
data[c(1, 3, 4), 21] <- "GoodLoan"
data[c(1,2)]
head(data[c(1,2)])
data[c(1,2)]
data[, c(1,2)]
data[c(1,2), 3]
head(data)
data[c(1,2), 4]
data[c(1,2), 21]
data[c(1,2), 21] <- "GoodLoan"
head(data)
h <- head(data)
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U
h$U[1]
class(h$U[1])
class(h$U[4])
library(GEOquery)
library(simpleaffy)
library(Biobase)
library(RColorBrewer)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(annotate)
library(ggplot2)
constDataset <- "GSE10245"
constDataDirectory <- "data"
constEsetFile <- "gcrmaExpressionSet.txt"
constWorkingDirectory <- "~/Documents/projects/git-projects/r-projects/bmi"
# set the working directory
# directory where the required files will be downloaded
setwd(constWorkingDirectory)
##############
# 1. Data Preparation
##############
funcGetDataFiles <- function(){
# download the dataset, extract the .tar file
# unzip the resulting gzipped files, to get the .cel files
getGEOSuppFiles(constDataset)
untar(paste(constDataset, "/", constDataset, "_RAW.tar", sep=""), exdir=constDataDirectory)
celAffyBatch <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
untar(paste(constDataset, "/", constDataset, "_RAW.tar", sep=""), exdir=constDataDirectory)
sapply(paste(constDataDirectory, list.files(constDataDirectory, pattern = "gz$") , sep="/"), gunzip)
}
celAffyBatch <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
#############
# 3. Normalization
#############
##########################################
# uncomment the below two lines, when run for the first time,
# i.e. if the expression data is not stored in a file
##########################################
# gcrmaEset <- gcrma(celAffyBatch)
# write.exprs(gcrmaEset, file=constEsetFile)
# load expressionSet object from the file saved above
# set the pheno and annotation data from the AffyBatch object
gcrmaEset <- readExpressionSet(constEsetFile)
pData(gcrmaEset) <- pData(celAffyBatch)
annotation(gcrmaEset) <- annotation(celAffyBatch)
#################
# 4. Visualization and QC
#################
colors <- brewer.pal(8, "Set1")
#####################################################
boxplot(celAffyBatch, col=colors, las=3, cex.axis=0.6)
boxplot(gcrmaEset, col=colors, las=3, cex.axis=0.6)
hist(celAffyBatch, col=colors)
hist(gcrmaEset, col=colors)
celAffyBatch.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=FALSE)
gcrmaEset.filtered <- celAffyBatch.filtered$eset
# prepare the design matrix and rename columns of the design as needed
samples <- factor(gcrmaEset$Factors)
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)
# produce a linear model fit, for every row of the expression data
# try dim(fit) to check the rows(number of linear fits) vs cols(number of coefficients)
fit <- lmFit(gcrmaEset.filtered, design)
cont.matrix <- makeContrasts(ACvsSCC=adenocarcinoma - squamous_cell_carcinoma, levels=design)
eBayesFit <- eBayes(contrasts.fit(fit, cont.matrix))
# print the number of probesets with |logFC| > 2, 3, 4
# results: 481, 150 and 67 respectively
lapply(2:4, function(x) nrow(topTable(eBayesFit, coef=1, number=Inf, lfc=x)) )
gene.summary <- topTable(eBayesFit, coef=1, number=Inf, sort.by='logFC')
gene.symbols <- getSYMBOL(row.names(gene.summary), "hgu133plus2.db")
gene.details <- cbind(gene.summary, gene.symbols)
write.table(gene.details, file="gene_details.txt", sep="\t")
#########################
# 7. Regulated Gene finding
#########################
# find the top 10 up-regulated and top 10 down-regulated genes
# write them to a file for convenience
gene.up <- head(gene.details[gene.details$logFC > 0, ], n=10)
gene.down <- head(gene.details[gene.details$logFC < 0, ], n=10)
gene.up
head(gene.details[gene.details$logFC > 0, ], n=11)
gene.up <- head(gene.details[gene.details$logFC > 0, ], n=11)
gene.down <- head(gene.details[gene.details$logFC < 0, ], n=10)
write.table(gene.up, file="gene_up.txt", sep="\t")
write.table(gene.down, file="gene_down.txt", sep="\t")
head(gene.up)
?head
gene.symbols[is.na(gene.symbols)] <- "????"
###################
# 8. Volcano Plots
###################
# find the boolean array, matching the given criteria(match EGFR | SOX2 | TP53)
probe.matches <- gene.symbols == "EGFR" | gene.symbols == "SOX2" | gene.symbols == "TP53"
probe.not.positions <- which(!probe.matches)
# construct a better indicative vector for labels
# label format: "(probe_id, gene_symbol)"
probe.labels <- paste("(", row.names(gene.details), ", ", gene.symbols, ")", sep="")
# set unwanted probe labels to NA, for elimination
probe.labels[probe.not.positions] <- NA
# write.table(probe.labels[!is.na(probe.labels)], file="gene_probe_map.txt")
# volcano plot for fold-change vs p-values
# genes(EGFR, TP53, SOX2) are indicated in a distinct color
ggplot(gene.summary,
aes(
label=probe.labels,
x=gene.summary$logFC,
y=-log10(gene.summary$P.Value))) +
# probe.matches has TRUE for the the three genes(EGFR, TP53, SOX2) and FALSE for all others
# these aesthetics help color/shape the three genes differently than the others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
geom_text(size=3) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("EGFR, TP53, SOX2", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("EGFR, TP53, SOX2", "Other")) +
ggtitle("Volcano Plot(Fold-Change vs P-Value)")
probe.matches <- abs(gene.details$logFC) > 3 & gene.details$P.Value < 0.05
probe.not.positions <- which(!probe.matches)
# volcano plot for fold-change vs p-values
# probes with |logFC|> 3 and p-value < 0.05 are indicated in a distinct color
ggplot(gene.summary,
aes(
x=gene.summary$logFC,
y=-log10(gene.summary$P.Value))) +
# probe.matches has TRUE for the genes that match the above criteria and FALSE for all others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Genes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Genes", "Other")) +
ggtitle("Volcano Plot(Fold-Change vs P-Value)") +
ggplot(gene.summary,
aes(
x=gene.summary$logFC,
y=-log10(gene.summary$P.Value))) +
# probe.matches has TRUE for the genes that match the above criteria and FALSE for all others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Genes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Genes", "Other")) +
ggtitle("Volcano Plot(Fold-Change vs P-Value)") +
# indicate the fold-change cut-off
geom_vline(xintercept=3, linetype=3) +
geom_vline(xintercept=-3, linetype=3)+
# indicate the p-value cut-off
geom_hline(yintercept=-log10(0.05), linetype=3)
celAffyBatch.qc <- fitPLM(celAffyBatch)
# Create an image of the first .CEL:
image(celAffyBatch.qc, which=1, add.legend=TRUE)
image(celAffyBatch.qc, which=4, add.legend=TRUE)
image(celAffyBatch.qc, which=4, add.legend=TRUE)
RLE(celAffyBatch.qc, main="RLE")
RLE(celAffyBatch.qc, main="RLE", las=3)
RLE(celAffyBatch.qc, main="RLE", las=3, cex.axis=0.6)
NUSE(celAffyBatch.qc, main="NUSE", las=3, cex.axis=0.6)
RLE(celAffyBatch.qc, main="RLE", las=3, cex.axis=0.6)
NUSE(celAffyBatch.qc, main="NUSE", las=3, cex.axis=0.6)
probe.matches <- gene.symbols == "EGFR" | gene.symbols == "SOX2" | gene.symbols == "TP53"
probe.not.positions <- which(!probe.matches)
# construct a better indicative vector for labels
# label format: "(probe_id, gene_symbol)"
probe.labels <- paste("(", row.names(gene.details), ", ", gene.symbols, ")", sep="")
probe.labels
probe.labels[probe.not.positions] <- NA
probe.labels
probe.labels[!is.na(probe.labels)]
cat(probe.labels[!is.na(probe.labels)], sep="\n")
