install.packages("AnnotLists")
library("AnnotLists", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
remove.packages("AnnotLists", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
library()
a = c(1,2,3)
b = sum(a)
b
rnorm(10)
rnorm(10)
source("http://www.bioconductor.org/biocLite.R")
biocLite("golubEsets")
require(golubEsets)
#Object
data(Golub_Merge)
Golub_Merge
experimentData(Golub_Merge)
substr(abstract(Golub_Merge), 1,100)
abstract(Golub_Merge)
substr(abstract(Golub_Merge), 1, 200)
Golub_Merge
dim(exprs(Golub_Merge))
exprs(Golub_Merge)
head(exprs(Golub_Merge))
head(exprs(Golub_Merge))
exit
exit()
system.file
help
help(system.file)
system.file("extData", package="Biobase")
system.file()
system.file(package="Biobase")
getwd()
ls
ls()
system.file("extdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprsFile
dataDirectory <- system.file("man", package="Biobase")
dataDirectory <- system.file("ExpressionSet", package="Biobase")
dataDirectory
help(read.table)
dataDirectory <- system.file("exprdata", package="Biobase")
dataDirectory <- system.file("exprsdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprs <- read.table(exprsFile, header=TRUE, sep="\t", row.names=1, as.is=TRUE)
dim(exprs)
exprs
exprs <- as.matrix(exprs)
dim(exprs)
exprs[1, 1]
exprs[1, 2]
exprs[2, 1]
colnames(exprs)
rownames(exprs)
head(exprs)
dim(head(exprs))
head(exprs[, 1:5])
exprs[, 1:5]
exprs[, 1]
pDataFile <- file.path(dataDirectory, "pData.txt")
help(factor)
pData <- read.table(pDataFile, sep="\t", header=TRUE, row.names=1)
pData
colnames(pData)
apropos("name")
colnames(pData)
help(sapply)
sapply(colnames(pData), class)
sapply(pData, class)
pData
pData
pData[1, c("type", "score")]
pData[1, 2, c("type", "score")]
pData[c(1, 2), c("type", "score")]
pData
pData[c(1, 2),]
??input
?input
help(input)
apropos(plot)
apropos(file.path)
pain <- c(0, 3, 2, 2, 1)
sPain <- as.factor(c(3,2,2,1))
levels(sPain) <- c("none", "mild", "medium", "severe")
is.factor(sPain)
is.vector(sPain)
sPain
sPain <- as.factor(c(4,3,2,1))
sPain
levels(sPain) <- c("none", "mild", "medium", "severe")
sPain
?names
pain
pain[-4]
pain[-2]
pain[-1]
pain[-5]
pain[1:3]
pain[-1:-3]
pain[-1:-2]
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
}
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
};
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2;
}
pain
pain[-3:-1]
pain[-4:-1]
library("affy")
?library
library
library()
untar("GSE3744/GSE3744_RAW.tar", exdir="data")
data <- read.table()
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep = ",",
)
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep=",",
header=T
)
data
head(data)
data[10, ]
data[1:10, ]
data[1:100, ]
class(data)
summary(data)
dim(data)
summary(data)
dataURL <- paste("http://archive.ics.uci.edu/ml", "machine-learning-databases/statlog/german/german.data", sep="")
dataURL
dataURL <- paste("http://archive.ics.uci.edu/ml/", "machine-learning-databases/statlog/german/german.data", sep="")
clear
dataURL
data <- read.table(dataURL, header=F)
data
head(data)
data <- read.table(dataURL, stringsAsFactors=F, header=F)
head(data)
?read.table
colnames(data) <- 1:21
head(data)
colnames(data) <- A:Z
colnames(data) <- 'A':'Z'
a <- "A:Z"
a
a <- "A":"Z"
?range
range(A, Z)
range("A, "Z"")
range("A", "Z"")
f
f
f
range
range()
;
;
:sdsd
sd
sd
sd
d
)
)
)))
head(data)
d$21
ddata$21
data$21
data
data$
data$1
data$[1]
head(data)
head(data)
head(data[, 21])
data[21]
data[21] <- as.factor(ifelse(data[21]==1, "Good Loan", "Bad Loan"))
head(data)
data[21] <- as.factor(ifelse(data[21]==1, "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="Good Loan", "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="BadLoan", "BadLoan", "GoodLoan"))
head(data)
data[1, 21]
data[1, 21] == "BadLoan"
?as.factor
range(A, a)
range("A", "Z")
range("A":"Z")
range(1, 10)
1:10
A:Z
"A":"Z"
'A':'Z'
letters
LETTERS
letters[1:21]
head(data)
colnames(data) <- LETTERS[1:21]
head(data)
data$A
head(data)
data[c(1, 3, 4), 21] <- "GoodLoan"
data[c(1,2)]
head(data[c(1,2)])
data[c(1,2)]
data[, c(1,2)]
data[c(1,2), 3]
head(data)
data[c(1,2), 4]
data[c(1,2), 21]
data[c(1,2), 21] <- "GoodLoan"
head(data)
h <- head(data)
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U
h$U[1]
class(h$U[1])
class(h$U[4])
?data.frame
data.frame(1, 1:100)
data.frame(1, 1:10)
data.frame(c(1,2), c(3,4))
data.frame(c(1,2), c(3,4))
a <- data.frame(c(1,2), c(3,4))
colnames(a)
colnames(a) <- c("x", "y")
a
x <- c(7,3,4,6,10,9)
y <- c(276, 43, 82, 136, 417, 269)
dat <- data.frame(x, y)
dat
model <- lm(y~x)
model
coef(model)
coefs <- coef(model)
plot(x, y, pch=20, col="red", xlab="N Friends", ylab="Time Spent(secs)")
?plot
abline(coefs[1], coefs[2])
install.packages
install.packages("shiny")
.libPaths()
library()
installed.packages()
lm(mpg~wt, data=mtcars)
lm(mpg~wt+0, data=mtcars)
lm(mpg~wt, data=mtcars)
lm(mpg~wt, data=mtcars)
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages("WGCNA")
library(GEOquery)
library(simpleaffy)
library(Biobase)
library(RColorBrewer)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(annotate)
library(ggplot2)
# define constants needed for the script
constDataset <- "GSE10245"
constDataDirectory <- "data"
constEsetFile <- "gcrmaExpressionSet.txt"
constWorkingDirectory <- "~/Documents/projects/git-projects/r-projects/bmi"
# set the working directory
# directory where the required files will be downloaded
setwd(constWorkingDirectory)
##############
# 1. Data Preparation
##############
celAffyBatch <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
gcrmaEset <- readExpressionSet(constEsetFile)
pData(gcrmaEset) <- pData(celAffyBatch)
annotation(gcrmaEset) <- annotation(celAffyBatch)
summary
summary(gcrmaEset)
gcrmaEset
experimentData(gcrmaEset)
assayData(gcrmaEset)
gcrmaEset
celAffyBatch
head(gcrmaEset)
funcPreVisualize()
funcPreVisualize <- function(){
# set colour palette
colors <- brewer.pal(8, "Set1")
#####################################################
# boxplot parameters:
#   las = 3 indicates vertical naming in the x-axis
#   cex.axis adjusts the font of axis names, in terms of fraction of the default size
#####################################################
# boxplot of unnormalized intensity values
boxplot(celAffyBatch, col=colors, las=3, cex.axis=0.6)
# plot a boxplot of normalized intensity values
boxplot(gcrmaEset, col=colors, las=3, cex.axis=0.6)
# histogram of unnormalized values
hist(celAffyBatch, col=colors)
# histogram of normalized values
hist(gcrmaEset, col=colors)
}
funcPreVisualize()
boxplot(celAffyBatch, col=colors, las=3, cex.axis=0.6)
colors <- brewer.pal(8, "Set1")
#####################################################
# boxplot parameters:
#   las = 3 indicates vertical naming in the x-axis
#   cex.axis adjusts the font of axis names, in terms of fraction of the default size
#####################################################
# boxplot of unnormalized intensity values
boxplot(celAffyBatch, col=colors, las=3, cex.axis=0.6)
gcrmaEset$exprs
gcrmaEset
gcrmaEset$AssayData
assayData(gcrmaEset)
assayData(gcrmaEset)[,]
assayData(gcrmaEset)
exprs(gcrmaEset)
summary(exprs(gcrmaEset))
exprs(celAffyBatch)
celAffyBatch
class(exprs(celAffyBatch))
dim(exprs(celAffyBatch))
head(exprs(celAffyBatch))
summary(exprs(celAffyBatch))
hist(summary(exprs(celAffyBatch)))
summary(exprs(celAffyBatch))
summary(exprs(celAffyBatch))$Min
smry <- summary(exprs(celAffyBatch))
smry$Min
smry
class(smry)
rownames(smry)
colnames(smry)
smry$GSM258553.CEL
smry["GSM258553.CEL"]
colnames(smry)
smry
as.data.frame.matrix(smry)
expr <- exprs(celAffyBatch)
expr
head(expr)
dim(expr)
mean
mean(expr)
lapply(2:4, function(x) x)
lapply(nrow(expr), function(x) x)
lapply(1:nrow(expr), function(x) x)
lapply(1:nrow(expr), function(x) mean(expr[x, ]))
lapply(1:nrow(expr), function(x) max(expr[x, ]))
sink(file="max.txt")
lapply(1:nrow(expr), function(x) max(expr[x, ]))
sink()
maxes <- lapply(1:nrow(expr), function(x) max(expr[x, ]))
dim(maxes)
length(maxes)
hist(maxes)
class(maxes)
hist
??hist
hist??
help(hist)
class(hist[1])
class(maxes[1])
maxes[1]
list_maxas.list(maxes)
list_max <- as.list(maxes)
list_max
max(expr[1, ])
max(expr[2, ])
maxes = list(); lapply(1:nrow(expr), function(x) maxes[x] <- max(expr[x, ]))
maxes = list()
lapply(1:nrow(expr), function(x) maxes[x] <- max(expr[x, ]))
lapply(1:nrow(expr), function(x) max(expr[x, ]))
a <- list()
a
a[1] <- 23
a
a <- c()
a
a[1] <- 23
a
maxes = c()
lapply(1:nrow(expr), function(x) maxes[x] <- max(expr[x, ]))
b <- c(2,3,4)
a <- c()
lapply(1:length(b), function(x) a[x] <- b[x])
a
b
a
a[1] <- b[1]
a
lapply(1:length(b), function(x) x)
lapply(1:length(b), function(x) class(x))
sapply(1:length(b), function(x) class(x))
sapply(1:length(b), function(x) x)
sapply(1:length(b), function(x) a[x] <- b[x])
a
sapply(1:length(b), function(x) b[x])
sapply(1:length(b), function(x) a[x])
sapply(1:length(b), function(x) a[x] <- b[x])
a
a
b
sapply(1:length(b), function(x) a <- c(a, b[x]))
a
sapply(1:length(b), function(x) a <- b[x])
a
c <- c()
sapply(1:length(b), function(x) c[x] <- b[x])
c
sapply(1:length(b), function(x) d[x] <- b[x])
sapply(1:length(b), function(x) b[x])
d <- sapply(1:length(b), function(x) b[x])
d
class(d)
maxes = c()
maxes <- sapply(1:nrow(expr), function(x) max(expr[x, ]))
maxes
hist(maxes)
boxplot(maxes)
help(boxplot)
boxplot(maxes)
colors <- brewer.pal(8, "Set1")
boxplot(maxes, col=colors)
length(maxes)
summary(maxes)
hist(maxes, col=colors)
summary(maxes)
maxes > 20000
sum(maxes > 20000)
sum(maxes < 20000)
1593/1353302
1593/1353302 * 100
mins <- sapply(1:nrow(expr), function(x) min(expr[x, ]))
summary(mins)
hist(mins)
head(expr)
summary(mins)
