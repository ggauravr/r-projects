install.packages("AnnotLists")
library("AnnotLists", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
remove.packages("AnnotLists", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
library()
a = c(1,2,3)
b = sum(a)
b
rnorm(10)
rnorm(10)
source("http://www.bioconductor.org/biocLite.R")
biocLite("golubEsets")
require(golubEsets)
#Object
data(Golub_Merge)
Golub_Merge
experimentData(Golub_Merge)
substr(abstract(Golub_Merge), 1,100)
abstract(Golub_Merge)
substr(abstract(Golub_Merge), 1, 200)
Golub_Merge
dim(exprs(Golub_Merge))
exprs(Golub_Merge)
head(exprs(Golub_Merge))
head(exprs(Golub_Merge))
exit
exit()
system.file
help
help(system.file)
system.file("extData", package="Biobase")
system.file()
system.file(package="Biobase")
getwd()
ls
ls()
system.file("extdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprsFile
dataDirectory <- system.file("man", package="Biobase")
dataDirectory <- system.file("ExpressionSet", package="Biobase")
dataDirectory
help(read.table)
dataDirectory <- system.file("exprdata", package="Biobase")
dataDirectory <- system.file("exprsdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprs <- read.table(exprsFile, header=TRUE, sep="\t", row.names=1, as.is=TRUE)
dim(exprs)
exprs
exprs <- as.matrix(exprs)
dim(exprs)
exprs[1, 1]
exprs[1, 2]
exprs[2, 1]
colnames(exprs)
rownames(exprs)
head(exprs)
dim(head(exprs))
head(exprs[, 1:5])
exprs[, 1:5]
exprs[, 1]
pDataFile <- file.path(dataDirectory, "pData.txt")
help(factor)
pData <- read.table(pDataFile, sep="\t", header=TRUE, row.names=1)
pData
colnames(pData)
apropos("name")
colnames(pData)
help(sapply)
sapply(colnames(pData), class)
sapply(pData, class)
pData
pData
pData[1, c("type", "score")]
pData[1, 2, c("type", "score")]
pData[c(1, 2), c("type", "score")]
pData
pData[c(1, 2),]
??input
?input
help(input)
apropos(plot)
apropos(file.path)
pain <- c(0, 3, 2, 2, 1)
sPain <- as.factor(c(3,2,2,1))
levels(sPain) <- c("none", "mild", "medium", "severe")
is.factor(sPain)
is.vector(sPain)
sPain
sPain <- as.factor(c(4,3,2,1))
sPain
levels(sPain) <- c("none", "mild", "medium", "severe")
sPain
?names
pain
pain[-4]
pain[-2]
pain[-1]
pain[-5]
pain[1:3]
pain[-1:-3]
pain[-1:-2]
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
}
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
};
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2;
}
pain
pain[-3:-1]
pain[-4:-1]
library("affy")
?library
library
library()
untar("GSE3744/GSE3744_RAW.tar", exdir="data")
data <- read.table()
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep = ",",
)
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep=",",
header=T
)
data
head(data)
data[10, ]
data[1:10, ]
data[1:100, ]
class(data)
summary(data)
dim(data)
summary(data)
dataURL <- paste("http://archive.ics.uci.edu/ml", "machine-learning-databases/statlog/german/german.data", sep="")
dataURL
dataURL <- paste("http://archive.ics.uci.edu/ml/", "machine-learning-databases/statlog/german/german.data", sep="")
clear
dataURL
data <- read.table(dataURL, header=F)
data
head(data)
data <- read.table(dataURL, stringsAsFactors=F, header=F)
head(data)
?read.table
colnames(data) <- 1:21
head(data)
colnames(data) <- A:Z
colnames(data) <- 'A':'Z'
a <- "A:Z"
a
a <- "A":"Z"
?range
range(A, Z)
range("A, "Z"")
range("A", "Z"")
f
f
f
range
range()
;
;
:sdsd
sd
sd
sd
d
)
)
)))
head(data)
d$21
ddata$21
data$21
data
data$
data$1
data$[1]
head(data)
head(data)
head(data[, 21])
data[21]
data[21] <- as.factor(ifelse(data[21]==1, "Good Loan", "Bad Loan"))
head(data)
data[21] <- as.factor(ifelse(data[21]==1, "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="Good Loan", "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="BadLoan", "BadLoan", "GoodLoan"))
head(data)
data[1, 21]
data[1, 21] == "BadLoan"
?as.factor
range(A, a)
range("A", "Z")
range("A":"Z")
range(1, 10)
1:10
A:Z
"A":"Z"
'A':'Z'
letters
LETTERS
letters[1:21]
head(data)
colnames(data) <- LETTERS[1:21]
head(data)
data$A
head(data)
data[c(1, 3, 4), 21] <- "GoodLoan"
data[c(1,2)]
head(data[c(1,2)])
data[c(1,2)]
data[, c(1,2)]
data[c(1,2), 3]
head(data)
data[c(1,2), 4]
data[c(1,2), 21]
data[c(1,2), 21] <- "GoodLoan"
head(data)
h <- head(data)
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U
h$U[1]
class(h$U[1])
class(h$U[4])
library(GEOquery)
library(simpleaffy)
library(Biobase)
library(RColorBrewer)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(annotate)
# define constants needed for the script
constDataset <- "GSE10245"
constDataDirectory <- "data"
constEsetFile <- "gcrmaExpressionSet.txt"
constWorkingDirectory <- "~/Documents/projects/git-projects/r-projects/bmi"
# set the working directory
# directory where the required files will be downloaded
setwd(constWorkingDirectory)
celAffyBatch <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
# gcrmaEset <- gcrma(celAffyBatch)
# write.exprs(gcrmaEset, file=constEsetFile)
# load expressionSet object from the file saved above
gcrmaEset <- readExpressionSet(constEsetFile)
pData(gcrmaEset) <- pData(celAffyBatch)
annotation(gcrmaEset) <- annotation(celAffyBatch)
# set colour palette
colors <- brewer.pal(8, "Set1")
# boxplot parameters:
#   las = 3 indicates vertical naming in the x-axis
# 	cex.axis adjusts the font of axis names, in terms of fraction of the default size
celAffyBatch.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=FALSE)
gcrmaEset.filtered <- celAffyBatch.filtered$eset
samples <- factor(gcrmaEset$Factors)
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)
# produce a linear model fit, for every row of the expression data
# try dim(fit) to check the rows(number of linear fits) vs cols(number of coefficients)
fit <- lmFit(gcrmaEset.filtered, design)
cont.matrix <- makeContrasts(ACvsSCC=adenocarcinoma - squamous_cell_carcinoma, levels=design)
eBayesFit <- eBayes(contrasts.fit(fit, cont.matrix))
# print the number of probesets with |logFC| > 2, 3, 4
# results: 481, 150 and 67 respectively
lapply(2:4, function(x) nrow(topTable(eBayesFit, coef=1, number=10000, lfc=x)) )
ID <- featureNames(gcrmaEset.filtered)
ID
gene.symbols <- getSYMBOL(IDs, "hgu133plus2.db")
IDs <- featureNames(gcrmaEset.filtered)
gene.symbols <- getSYMBOL(IDs, "hgu133plus2.db")
gene.symbols
results <- cbind(gene.synbols, IDs)
results <- cbind(gene.symbols, IDs)
head(results)
IDs
gene.list <- topTable(eBayesFit, coef=1, number=1000000, lfc='logFC')
gene.list
gene.list <- topTable(eBayesFit, coef=1, number=1000000, sort.by='logFC')
gene.list
head(gene.list)
gene.symbols <- getSYMBOL(row.names(gene.list), "hgu133plus2.db")
head(gene.symbols)
results <- cbind(gene.list, gene.symbols)
head(results)
head(results)
results <- cbind(gene.symbols, gene.list)
head(results)
?write.table
setwd(constWorkingDirectory)
write.table(head(results), file="gene_details.txt", sep="\t")
colnames(results)
colnames(results) <- c(colnames(results), "probeset.id")
dim(results)
results <- cbind(gene.list, gene.symbols)
head(results)
write.table(results, file="gene_details.txt", sep="\t")
head(gene.list)
dim(gene.list)
rownames(gene.list)
row.names(gene.list)
?rownames
?row.names
?cbind
gene.results <- cbind(gene.list, gene.symbols)
write.table(gene.results, file="gene_details.txt", sep="\t")
gene.results <- cbind(gene.list, gene.symbols)
gene.results
head(gene.results)
tail
head(gene.results)
head(gene.results, n=10)
head(gene.results, n=20)
topTable
?top.table
?topTable
tail(gene.results)
head(gene.results, n=100)
?head
gene.list <- topTable(eBayesFit, coef=2, number=1000000, sort.by='logFC')
gene.list <- topTable(eBayesFit, coef=1, number=1000000, sort.by='logFC')
dim(gene.list)
gene.list <- topTable(eBayesFit, coef=1, number=1000000, sort.by='logFC')
gene.symbols <- getSYMBOL(row.names(gene.list), "hgu133plus2.db")
gene.results <- cbind(gene.list, gene.symbols)
tail(gene.list)
tail(gene.results)
head(gene.results)
head(gene.results, n=10)
head(gene.results, n=500)
top_500 <- head(gene.results, n=500)
col.names(top_500)
colnames(top_500)
top_500[logFC > 0]
top_500["logFC" > 0]
top_500["logFC" > 3]
top_500$logFC > 2
top_500[top_500$logFC > 2]
top_500[top_500$logFC > 2, ]
top_500[top_500$logFC > 0, ]
gene.results[gene.results$logFC > 0, ]
head(gene.results[gene.results$logFC > 0, ], n=10)
head(gene.results[gene.results$logFC < 0, ], n=10)
head(gene.results, n=500)
head(gene.results[gene.results$logFC > 0, ], n=10)
genes.up <- head(genes.results[gene.results$logFC > 0, ], n=10)
gene.up <- head(gene.results[gene.results$logFC > 0, ], n=10)
gene.down <- head(gene.results[gene.results$logFC < 0, ], n=10)
write.table(gene.up, file="genes_up_regulated.txt", sep="\t")
write.table(gene.down, file="genes_down_regulated.txt", sep="\t")
