a = c(1,2,3)
b = sum(a)
b
rnorm(10)
rnorm(10)
source("http://www.bioconductor.org/biocLite.R")
biocLite("golubEsets")
require(golubEsets)
#Object
data(Golub_Merge)
Golub_Merge
experimentData(Golub_Merge)
substr(abstract(Golub_Merge), 1,100)
abstract(Golub_Merge)
substr(abstract(Golub_Merge), 1, 200)
Golub_Merge
dim(exprs(Golub_Merge))
exprs(Golub_Merge)
head(exprs(Golub_Merge))
head(exprs(Golub_Merge))
exit
exit()
system.file
help
help(system.file)
system.file("extData", package="Biobase")
system.file()
system.file(package="Biobase")
getwd()
ls
ls()
system.file("extdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprsFile
dataDirectory <- system.file("man", package="Biobase")
dataDirectory <- system.file("ExpressionSet", package="Biobase")
dataDirectory
help(read.table)
dataDirectory <- system.file("exprdata", package="Biobase")
dataDirectory <- system.file("exprsdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprs <- read.table(exprsFile, header=TRUE, sep="\t", row.names=1, as.is=TRUE)
dim(exprs)
exprs
exprs <- as.matrix(exprs)
dim(exprs)
exprs[1, 1]
exprs[1, 2]
exprs[2, 1]
colnames(exprs)
rownames(exprs)
head(exprs)
dim(head(exprs))
head(exprs[, 1:5])
exprs[, 1:5]
exprs[, 1]
pDataFile <- file.path(dataDirectory, "pData.txt")
help(factor)
pData <- read.table(pDataFile, sep="\t", header=TRUE, row.names=1)
pData
colnames(pData)
apropos("name")
colnames(pData)
help(sapply)
sapply(colnames(pData), class)
sapply(pData, class)
pData
pData
pData[1, c("type", "score")]
pData[1, 2, c("type", "score")]
pData[c(1, 2), c("type", "score")]
pData
pData[c(1, 2),]
??input
?input
help(input)
apropos(plot)
apropos(file.path)
pain <- c(0, 3, 2, 2, 1)
sPain <- as.factor(c(3,2,2,1))
levels(sPain) <- c("none", "mild", "medium", "severe")
is.factor(sPain)
is.vector(sPain)
sPain
sPain <- as.factor(c(4,3,2,1))
sPain
levels(sPain) <- c("none", "mild", "medium", "severe")
sPain
?names
pain
pain[-4]
pain[-2]
pain[-1]
pain[-5]
pain[1:3]
pain[-1:-3]
pain[-1:-2]
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
}
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
};
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2;
}
pain
pain[-3:-1]
pain[-4:-1]
library("affy")
?library
library
library()
untar("GSE3744/GSE3744_RAW.tar", exdir="data")
data <- read.table()
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep = ",",
)
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep=",",
header=T
)
data
head(data)
data[10, ]
data[1:10, ]
data[1:100, ]
class(data)
summary(data)
dim(data)
summary(data)
dataURL <- paste("http://archive.ics.uci.edu/ml", "machine-learning-databases/statlog/german/german.data", sep="")
dataURL
dataURL <- paste("http://archive.ics.uci.edu/ml/", "machine-learning-databases/statlog/german/german.data", sep="")
clear
dataURL
data <- read.table(dataURL, header=F)
data
head(data)
data <- read.table(dataURL, stringsAsFactors=F, header=F)
head(data)
?read.table
colnames(data) <- 1:21
head(data)
colnames(data) <- A:Z
colnames(data) <- 'A':'Z'
a <- "A:Z"
a
a <- "A":"Z"
?range
range(A, Z)
range("A, "Z"")
range("A", "Z"")
f
f
f
range
range()
;
;
:sdsd
sd
sd
sd
d
)
)
)))
head(data)
d$21
ddata$21
data$21
data
data$
data$1
data$[1]
head(data)
head(data)
head(data[, 21])
data[21]
data[21] <- as.factor(ifelse(data[21]==1, "Good Loan", "Bad Loan"))
head(data)
data[21] <- as.factor(ifelse(data[21]==1, "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="Good Loan", "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="BadLoan", "BadLoan", "GoodLoan"))
head(data)
data[1, 21]
data[1, 21] == "BadLoan"
?as.factor
range(A, a)
range("A", "Z")
range("A":"Z")
range(1, 10)
1:10
A:Z
"A":"Z"
'A':'Z'
letters
LETTERS
letters[1:21]
head(data)
colnames(data) <- LETTERS[1:21]
head(data)
data$A
head(data)
data[c(1, 3, 4), 21] <- "GoodLoan"
data[c(1,2)]
head(data[c(1,2)])
data[c(1,2)]
data[, c(1,2)]
data[c(1,2), 3]
head(data)
data[c(1,2), 4]
data[c(1,2), 21]
data[c(1,2), 21] <- "GoodLoan"
head(data)
h <- head(data)
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U
h$U[1]
class(h$U[1])
class(h$U[4])
library(GEOquery)
library(simpleaffy)
library(Biobase)
library(RColorBrewer)
library(affyPLM)
library(limma)
library(hgu133plus2.db)
library(annotate)
library(ggplot2)
# define constants needed for the script
constDataset <- "GSE10245"
constDataDirectory <- "data"
constEsetFile <- "gcrmaExpressionSet.txt"
constWorkingDirectory <- "~/Documents/projects/git-projects/r-projects/bmi"
# set the working directory
# directory where the required files will be downloaded
setwd(constWorkingDirectory)
celAffyBatch <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
gcrmaEset <- readExpressionSet(constEsetFile)
pData(gcrmaEset) <- pData(celAffyBatch)
annotation(gcrmaEset) <- annotation(celAffyBatch)
# set colour palette
funcPreVisualize <- function(){
# set colour palette
colors <- brewer.pal(8, "Set1")
# boxplot parameters:
#   las = 3 indicates vertical naming in the x-axis
#   cex.axis adjusts the font of axis names, in terms of fraction of the default size
# boxplot of unnormalized intensity values
boxplot(celAffyBatch, col=colors, las=3, cex.axis=0.6)
# plot a boxplot of normalized intensity values
boxplot(gcrmaEset, col=colors, las=3, cex.axis=0.6)
# histogram of unnormalized values
hist(celAffyBatch, col=colors)
# histogram of normalized values
hist(gcrmaEset, col=colors)
}
celAffyBatch.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=FALSE)
# log shows the various features excluded and the reason of exclusion
# here, the only exclusions are from features where IQR < 0.5(default)
# and the Affymetrix Quality Control probesets, that is the probesets whose names
# begin with AFFY
# SEE: ?nsFilter to understand the various arguments and the output
celAffyBatch.filtered$filter.log
gcrmaEset.filtered <- celAffyBatch.filtered$eset
# prepare the design matrix and rename columns of the design as needed
samples <- factor(gcrmaEset$Factors)
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)
# produce a linear model fit, for every row of the expression data
# try dim(fit) to check the rows(number of linear fits) vs cols(number of coefficients)
fit <- lmFit(gcrmaEset.filtered, design)
cont.matrix <- makeContrasts(ACvsSCC=adenocarcinoma - squamous_cell_carcinoma, levels=design)
eBayesFit <- eBayes(contrasts.fit(fit, cont.matrix))
# print the number of probesets with |logFC| > 2, 3, 4
dim(eBayesFit)
lapply(2:4, function(x) nrow(topTable(eBayesFit, coef=1, number=Inf, lfc=x)) )
# get the probeset_ids and the relevant statistics
# map the probeset_ids to their corresponding gene symbols, using the annotation db
# combine/map probeset_ids and their statistics to gene symbols
# write the results into a file
gene.list <- topTable(eBayesFit, coef=1, number=Inf, sort.by='logFC')
gene.symbols <- getSYMBOL(row.names(gene.list), "hgu133plus2.db")
gene.results <- cbind(gene.list, gene.symbols)
write.table(gene.results, file="gene_details.txt", sep="\t")
# find the top 10 up-regulated and top 10 down-regulated genes
# write them to a file for convenience
gene.up <- head(gene.results[gene.results$logFC > 0, ], n=10)
gene.down <- head(gene.results[gene.results$logFC < 0, ], n=10)
write.table(gene.up, file="gene_up.txt", sep="\t")
write.table(gene.down, file="gene_down.txt", sep="\t")
# convert NA values to symbols for consistent handling
gene.symbols[is.na(gene.symbols)] <- "????"
probe.matches <- gene.symbols == "EGFR" | gene.symbols == "SOX2" | gene.symbols == "TP53"
probe.not.positions <- which(!probe.matches)
# construct a better indicative vector for labels
# label format: "(probe_id, gene_symbol)"
probe.labels <- paste("(", row.names(gene.results), ", ", gene.symbols, ")", sep="")
# set unwanted probe labels to NA, for elimination
probe.labels[probe.not.positions] <- NA
write.table(probe.labels[!is.na(probe.labels)], file="gene_probe_map.txt")
ggplot(gene.list,
aes(
label=probe.labels,
x=gene.list$logFC,
y=-log10(gene.list$P.Value))) +
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
geom_text(size=3) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("EGFR, TP53, SOX2", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("EGFR, TP53, SOX2", "Other")) +
ggtitle("Volcano Plot(Fold-Change of Genes vs P-Value)")
# list of top up-regulated genes, for enrichment analysis
gene.up$gene.symbols
gene.up$gene.symbols[!is.na(gene.up$gene.symbols)]
gene.down$gene.symbols[!is.na(gene.down$gene.symbols)]
probe.matches <- gene.symbols == "EGFR" | gene.symbols == "SOX2" | gene.symbols == "KRT5"
probe.not.positions <- which(!probe.matches)
# construct a better indicative vector for labels
# label format: "(probe_id, gene_symbol)"
probe.labels <- paste("(", row.names(gene.results), ", ", gene.symbols, ")", sep="")
probe.labels
head(probe.labels)
gene.list
row.names(gene.list)
length(row.names(gene.list))
length(gene.symbols)
gene.symbols[is.na(gene.symbols)]
gene.symbols
gene.symbols == "????"
sum(gene.symbols == "????")
gene.symbols == "????"
?getSYMBOL
featureNames(gene.list)
featureNames(gcrmaEset.filtered)
length(featureNames(gcrmaEset.filtered))
head(gcrmaEset.filtered)
head(experimentData(gcrmaEset))
head(experimentData(gcrmaEset.filtered))
head(phenoData(gcrmaEset.filtered))
head(experimentData(gcrmaEset.filtered))
x <- as.character(hgu133plus2SYMBOL)
head(x)
class(x)
length(x)
"214580_x_at" %in% x
"KRT6A" %in% x
row.names(x)
x
length(x)
length(unique(x))
names(x)
length(names(x))
y <- names(x)
pos <- which(y == "214580_x_at")
pos
"214580_x_at" %in% y
y
"214580_x_at" %in% y
length(x)
?lookUp
gene.results[gene.results$logFC > 2, ]
gene.results[abs(gene.results$logFC) > 2, ]
dim(gene.results[abs(gene.results$logFC) > 2, ])
gene.results[abs(gene.results$logFC) > 2, ]$gene.symbols
as.character(gene.results[abs(gene.results$logFC) > 2, ]$gene.symbols)
gene.train <- as.character(gene.results[abs(gene.results$logFC) > 2, ]$gene.symbols)
length(gene.train)
unique(gene.train)
length(unique(gene.train))
?sink
sink(file="gene_training_set.txt")
unique(gene.train)
sink()
unique(gene.train)
getwd()
gene.train <- gene.results[abs(gene.results$logFC) > 2, ]$gene.symbols
gene.train
levels(gene.train)
gene.train
gene.train[!is.na(gene.train)]
unique(gene.train[!is.na(gene.train)])
x <- unique(gene.train[!is.na(gene.train)])
x
cat(x, sep="\n")
x
cat(x)
y <- as.character(x)
cat(y)
cat(y, sep="\n")
sink(file="gene_training_set.txt")
cat(y, sep="\n")
sink()
gene.train
cat(x, sep="\n")
head(gene.results)
x <- head(gene.results)
x[, abs(x$logFC) > 6]
x[, abs(x$logFC) > 6.5]
x[, abs(x$logFC) > 7]
x[, abs(x$logFC) > 6]
x$logFC
abs(x$logFC) > 6.5
x[abs(x$logFC) > 6.5]
x[abs(x$logFC) > 6.5, ]
x[abs(x$logFC) > 6.5 & x$P.Value < 0.05, ]
abs(x$logFC) > 6.5
abs(x$logFC) > 6.5 & x$P.Value < 0.005
x
x$P.Value
x$P.Value <- c(.3, .1, .005, 0.1, 0.04, 0.03)
x
abs(x$logFC) > 6.5 & x$P.Value < 0.005
abs(x$logFC) > 6 & x$P.Value < 0.005
abs(x$logFC) > 6 && x$P.Value < 0.005
abs(x$logFC) > 6 & x$P.Value < 0.05
probe.matches <- abs(gene.results$logFC) > 3 & gene.results$P.Value < 0.05
probe.not.positions <- which(!probe.matches)
probe.matches
sum(probe.matches)
probe.not.positions
# construct a better indicative vector for labels
# label format: "(probe_id, gene_symbol)"
probe.labels <- row.names(gene.results)
head(probe.labels)
probe.labels[probe.not.positions] <- NA
probe.labels
head(probe.labels, n=200)
# volcano plot for fold-change vs p-values
# probes with |logFC|> 3 and p-value < 0.05 are indicated in a distinct color
ggplot(gene.list,
aes(
x=gene.list$logFC,
y=-log10(gene.list$P.Value))) +
# probe.matches has TRUE for the the three genes(EGFR, TP53, SOX2) and FALSE for all others
# this aesthetics help color the three genes differently than the others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
geom_text(size=3) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
ggtitle("Volcano Plot(Fold-Change of Genes vs P-Value)")
ggplot(gene.list,
aes(
label=probe.labels,
x=gene.list$logFC,
y=-log10(gene.list$P.Value))) +
# probe.matches has TRUE for the the three genes(EGFR, TP53, SOX2) and FALSE for all others
# this aesthetics help color the three genes differently than the others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
geom_text(size=3) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
ggtitle("Volcano Plot(Fold-Change of Genes vs P-Value)")
ggplot(gene.list,
ggplot(gene.list,
aes(
x=gene.list$logFC,
y=-log10(gene.list$P.Value))) +
# probe.matches has TRUE for the the three genes(EGFR, TP53, SOX2) and FALSE for all others
# this aesthetics help color the three genes differently than the others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
# geom_text(size=1) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
ggtitle("Volcano Plot(Fold-Change of Genes vs P-Value)")
# select genes with |logFC| > 2, for enrichment analysis
ggplot(gene.list,
aes(
x=gene.list$logFC,
y=-log10(gene.list$P.Value))) +
# probe.matches has TRUE for the the three genes(EGFR, TP53, SOX2) and FALSE for all others
# this aesthetics help color the three genes differently than the others
geom_point(aes(shape=probe.matches,
colour=probe.matches)) +
# geom_text(size=1) +
xlab("Log2 Fold-Change") +
ylab("-Log10 P-Value") +
scale_shape_discrete(name="Shape", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
scale_colour_discrete(name="Color", breaks=c(TRUE, FALSE), labels=c("Statistically Significant Probes", "Other")) +
ggtitle("Volcano Plot(Fold-Change of Genes vs P-Value)")
head(gene.list)
head(gene.symbols)
genes.up
gene.up
