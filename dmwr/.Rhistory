install.packages("AnnotLists")
library("AnnotLists", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
remove.packages("AnnotLists", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
library()
a = c(1,2,3)
b = sum(a)
b
rnorm(10)
rnorm(10)
source("http://www.bioconductor.org/biocLite.R")
biocLite("golubEsets")
require(golubEsets)
#Object
data(Golub_Merge)
Golub_Merge
experimentData(Golub_Merge)
substr(abstract(Golub_Merge), 1,100)
abstract(Golub_Merge)
substr(abstract(Golub_Merge), 1, 200)
Golub_Merge
dim(exprs(Golub_Merge))
exprs(Golub_Merge)
head(exprs(Golub_Merge))
head(exprs(Golub_Merge))
exit
exit()
system.file
help
help(system.file)
system.file("extData", package="Biobase")
system.file()
system.file(package="Biobase")
getwd()
ls
ls()
system.file("extdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprsFile
dataDirectory <- system.file("man", package="Biobase")
dataDirectory <- system.file("ExpressionSet", package="Biobase")
dataDirectory
help(read.table)
dataDirectory <- system.file("exprdata", package="Biobase")
dataDirectory <- system.file("exprsdata", package="Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprs <- read.table(exprsFile, header=TRUE, sep="\t", row.names=1, as.is=TRUE)
dim(exprs)
exprs
exprs <- as.matrix(exprs)
dim(exprs)
exprs[1, 1]
exprs[1, 2]
exprs[2, 1]
colnames(exprs)
rownames(exprs)
head(exprs)
dim(head(exprs))
head(exprs[, 1:5])
exprs[, 1:5]
exprs[, 1]
pDataFile <- file.path(dataDirectory, "pData.txt")
help(factor)
pData <- read.table(pDataFile, sep="\t", header=TRUE, row.names=1)
pData
colnames(pData)
apropos("name")
colnames(pData)
help(sapply)
sapply(colnames(pData), class)
sapply(pData, class)
pData
pData
pData[1, c("type", "score")]
pData[1, 2, c("type", "score")]
pData[c(1, 2), c("type", "score")]
pData
pData[c(1, 2),]
??input
?input
help(input)
apropos(plot)
apropos(file.path)
pain <- c(0, 3, 2, 2, 1)
sPain <- as.factor(c(3,2,2,1))
levels(sPain) <- c("none", "mild", "medium", "severe")
is.factor(sPain)
is.vector(sPain)
sPain
sPain <- as.factor(c(4,3,2,1))
sPain
levels(sPain) <- c("none", "mild", "medium", "severe")
sPain
?names
pain
pain[-4]
pain[-2]
pain[-1]
pain[-5]
pain[1:3]
pain[-1:-3]
pain[-1:-2]
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
}
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2
};
c <- function(v2){
v1 = c("1", "2")
v2 <= c("a", "b")
return v2;
}
pain
pain[-3:-1]
pain[-4:-1]
library("affy")
?library
library
library()
untar("GSE3744/GSE3744_RAW.tar", exdir="data")
data <- read.table()
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep = ",",
)
data <- read.table(
"http://www.win-vector.com/dfiles/car.data.csv",
sep=",",
header=T
)
data
head(data)
data[10, ]
data[1:10, ]
data[1:100, ]
class(data)
summary(data)
dim(data)
summary(data)
dataURL <- paste("http://archive.ics.uci.edu/ml", "machine-learning-databases/statlog/german/german.data", sep="")
dataURL
dataURL <- paste("http://archive.ics.uci.edu/ml/", "machine-learning-databases/statlog/german/german.data", sep="")
clear
dataURL
data <- read.table(dataURL, header=F)
data
head(data)
data <- read.table(dataURL, stringsAsFactors=F, header=F)
head(data)
?read.table
colnames(data) <- 1:21
head(data)
colnames(data) <- A:Z
colnames(data) <- 'A':'Z'
a <- "A:Z"
a
a <- "A":"Z"
?range
range(A, Z)
range("A, "Z"")
range("A", "Z"")
f
f
f
range
range()
;
;
:sdsd
sd
sd
sd
d
)
)
)))
head(data)
d$21
ddata$21
data$21
data
data$
data$1
data$[1]
head(data)
head(data)
head(data[, 21])
data[21]
data[21] <- as.factor(ifelse(data[21]==1, "Good Loan", "Bad Loan"))
head(data)
data[21] <- as.factor(ifelse(data[21]==1, "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="Good Loan", "GoodLoan", "BadLoan"))
head(data)
data[21] <- as.factor(ifelse(data[21]=="BadLoan", "BadLoan", "GoodLoan"))
head(data)
data[1, 21]
data[1, 21] == "BadLoan"
?as.factor
range(A, a)
range("A", "Z")
range("A":"Z")
range(1, 10)
1:10
A:Z
"A":"Z"
'A':'Z'
letters
LETTERS
letters[1:21]
head(data)
colnames(data) <- LETTERS[1:21]
head(data)
data$A
head(data)
data[c(1, 3, 4), 21] <- "GoodLoan"
data[c(1,2)]
head(data[c(1,2)])
data[c(1,2)]
data[, c(1,2)]
data[c(1,2), 3]
head(data)
data[c(1,2), 4]
data[c(1,2), 21]
data[c(1,2), 21] <- "GoodLoan"
head(data)
h <- head(data)
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U <- ifelse(h$U=="BadLoan", "BadLoan", "GoodLoan")
h$U
h$U
h$U[1]
class(h$U[1])
class(h$U[4])
source("http://bioconductor.org/biocLite.R")
biocLite(pkgs=c("RColorBrewer", "limma", "affy", "gcrma",
library(GEOquery)
library(simpleaffy)
library(Biobase)
library(RColorBrewer)
library(affyPLM)
library(limma)
constDataset <- "GSE10245"
constDataDirectory <- "data"
constEsetFile <- "gcrmaExpressionSet.txt"
constWorkingDirectory <- "./Downloads/temp"
# set the working directory
# directory where the required files will be downloaded
setwd(constWorkingDirectory)
celAffyBatchObject <- read.affy(covdesc="GDS3627_SampleAnnotation.txt", path=constDataDirectory)
gcrmaEset <- readExpressionSet(constEsetFile)
pData(gcrmaEset) <- pData(celAffyBatchObject)
annotation(gcrmaEset) <- annotation(celAffyBatchObject)
# set colour palette
colors <- brewer.pal(8, "Set1")
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=FALSE)
gcrmaEset.filtered <- celAffyBatchObject.filtered$eset
samples <- factor(gcrmaEset$Factors)
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)
# produce a linear model fit, for every row of the expression data
# try dim(fit) to check the rows(number of linear fits) vs cols(number of coefficients)
fit <- lmFit(gcrmaEset.filtered, design)
cont.matrix <- makeContrasts(ACvsSCC=adenocarcinoma - squamous_cell_carcinoma, levels=design)
eBayesFit <- eBayes(contrasts.fit(fit, cont.matrix))
topTable(eBayesFit, coef=1, number=5)
eBayesFit
dim(eBayesFit)
eBayesFit
eBayesFit$coefficients
head(eBayesFit$coefficients)
eBayesFit$coefficients[1,]
eBayesFit$coefficients[5,]
eBayesFit$coefficients[10,]
dim(eBayesFit$coefficients)
eBayesFit
?topTable
topTable(eBayesFit, coef=1, number=10, sort.by="logFC")
dim(gcrmaEset)
dim(gcrmaEset.filtered)
?nsFilter
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=TRUE, remove.dupEntrez=FALSE)
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=TRUE)
biocLite("hgu133plus2.db")
library(hgu133plus2.db)
library(annotate)
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=TRUE, remove.dupEntrez=TRUE)
celAffyBatchObject.filtered$filter.log
gcrmaEset.filtered <- celAffyBatchObject.filtered$eset
dim(gcmaEset.filtered)
dim(gcrmaEset.filtered)
dim(gcrmaEset)
54675-21348
54675-21348-13207
54675-21348-13207-10055
54675-21348-13207-10055-11
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=TRUE, remove.dupEntrez=FALSE)
# What got removed and why?
celAffyBatchObject.filtered$filter.log
gcrmaEset.filtered <- celAffyBatchObject.filtered$eset
dim(gcrmaEset)
dim(gcrmaEset.filtered)
celAffyBatchObject.filtered$filter.log
celAffyBatchObject.filtered <- nsFilter(gcrmaEset, require.entrez=FALSE, remove.dupEntrez=FALSE)
celAffyBatchObject.filtered$filter.log
dim(gcrmaEset)
54675-27305-62
dim(gcrmaEset.filtered)
54675-27307-62
dim(gcrmaEset.filtered)
dim(gcrmaEset.filtered$eset)
gcrmaEset.filtered <- celAffyBatchObject.filtered$eset
dim(gcrmaEset.filtered$eset)
dim(gcrmaEset.filtered)
?nsFilter
celAffyBatchObject.filtered$filter.log
featureNames(gcrmaEset)
celAffyBatchObject.filtered$filter.log
gcrmaEset.filtered <- celAffyBatchObject.filtered$eset
# prepare the design matrix and rename columns of the design as needed
samples <- factor(gcrmaEset$Factors)
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)
# produce a linear model fit, for every row of the expression data
# try dim(fit) to check the rows(number of linear fits) vs cols(number of coefficients)
fit <- lmFit(gcrmaEset.filtered, design)
cont.matrix <- makeContrasts(ACvsSCC=adenocarcinoma - squamous_cell_carcinoma, levels=design)
eBayesFit <- eBayes(contrasts.fit(fit, cont.matrix))
topTable(eBayesFit, coef=1, number=5)
topTable(eBayesFit, coef=1, number=10000, lfc=2)
dim(topTable(eBayesFit, coef=1, number=10000, lfc=2))
topTable(eBayesFit, coef=1, number=10000, lfc=3)
dim(topTable(eBayesFit, coef=1, number=10000, lfc=3))
dim(topTable(eBayesFit, coef=1, number=10000, lfc=4))
dim(topTable(eBayesFit, coef=1, number=10000, lfc=5))
dim(topTable(eBayesFit, coef=1, number=10000, lfc=6))
head(topTable(eBayesFit, coef=1, number=10000, lfc=6))
?topTable
ID <- featureNames(gcrmaEset.filtered)
ID
dim(ID)
head(ID)
length(ID)
gcrma
gcrmaEset
head(ID)
symbols <- getSYMBOL(ID, "hgu133plus2.db")
symbols
head(symbols)
length(symbols)
names <- as.character(lookUp(ID, "hgu133plus2.db", "GENENAME"))
names
length(names)
topTable(eBayesFit, coef=1, number=5, sort.by="logFC")
row.names(topTable(eBayesFit, coef=1, number=5, sort.by="logFC"))
?write.table
write.table(topTable(eBayesFit, coef=1, number=5, sort.by="logFC"), file="testTable.txt", sep="\t")
for(i in 2:4){
topTable(eBayesFit, coef=1, number=10000, lfc=i)
}
for(i in 2:4){
result <- topTable(eBayesFit, coef=1, number=10000, lfc=i)
}
for(i in 2:4){
result <- topTable(eBayesFit, coef=1, number=10000, lfc=i)
}
for(i in 2:4){
result <- topTable(eBayesFit, coef=1, number=10000, lfc=i)
result
}
for(i in 2:4){
result <- topTable(eBayesFit, coef=1, number=10000, lfc=i)
result
}
?lapply
lapply(2:4, function(x) sum(x, 2) )
lapply(2:4, function(x) topTable(eBayesFit, coef=1, number=1000, lfc=2) )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=1000, lfc=2)) )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=1000, lfc=x)) )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=1000, lfc=x)) )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=1000, lfc=x))[1] )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=10000, lfc=x))[1] )
lapply(2:4, function(x) dim(topTable(eBayesFit, coef=1, number=10000, lfc=x))[1] )
topTable(eBayesFit, coef=1, number=10000, lfc=3)
topTable(eBayesFit, coef=1, number=10000, lfc=4)
dim(topTable(eBayesFit, coef=1, number=10000, lfc=1))
dim(topTable(eBayesFit, coef=1, number=10000, lfc=0))
dim(topTable(eBayesFit, coef=1, number=20000, lfc=0))
dim(topTable(eBayesFit, coef=1, number=30000, lfc=0))
dim(topTable(eBayesFit, coef=1, number=30000, lfc=1))
dim(topTable(eBayesFit, coef=1, number=30000, lfc=2))
dim(topTable(eBayesFit, coef=1, number=30000, lfc=3))
dim(topTable(eBayesFit, coef=1, number=30000, lfc=4))
eBayesFit
dim(topTable(eBayesFit, coef=1, number=30000, sort.by="logFC"))
colnames(topTable(eBayesFit, coef=1, number=30000, sort.by="logFC"))
dim(topTable(eBayesFit, coef=1, number=30000, sort.by="logFC")[1])
head(topTable(eBayesFit, coef=1, number=30000, sort.by="logFC")[1])
eBayesFit
dim(eBayesFit)
eBayesFit
dim(fit)
fit
?eBayes
?makeContrats
?makeContrasts
samples <- factor(gcrmaEset$Factors)
samples
getwd()
setwd("/media/ggauravr/Other/Projects/git-projects/r-projects/dmwr")
list.files()
algaeTrain <- read.table('algae-train.txt')
algaeTrain
columns <- c('seanson', 'size', 'speed', 'mxPH', 'mnO2', 'C1', 'NO3', 'NH4', 'oPO4', 'PO4', 'Chla', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7')
algaeTrain <- read.table('algae-train.txt', col.names=columns, na.strings=c('XXXXXXX'))
algaeTrain
colnames(algaeTrain)
colnames(algaeTrain)[1]
colnames(algaeTrain)[1] <- 'season'
head(algaeTrain)
summary(algaeTrain)
colnames(algaeTrain)
hist(algaeTrain$mxPH, prob=T)
summary(algaeTrain)
hist(algaeTrain$mxPH, prob=T, xlab='', ylim=0:1)
lines(density(algaeTrain$mxPH, na.rm=T))
?lines
density(algaeTrain$mxPH, na.rm=T)
?density
density(algaeTrain$mxPH, na.rm=T)
lines(density(algaeTrain$mxPH, na.rm=T))
hist(algaeTrain$mxPH, prob=T, xlab='', ylim=0:1)
hist(algaeTrain$mxPH, xlab='', ylim=0:1)
hist(algaeTrain$mxPH, prob=T, xlab='', ylim=0:1)
hist(algaeTrain$mxPH, prob=T, xlab='', ylim=0:1)
lines(density(algaeTrain$mxPH, na.rm=T))
rug(jitter(algaeTrain$mxPH))
?jitter
jitter(algaeTrain$mxPH)
?rug
rug(jitter(algaeTrain$mxPH))
